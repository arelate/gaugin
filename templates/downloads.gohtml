{{define "downloads"}}
    {{range .}}
        <a class="download {{.Type}} {{.OS.String}}" href="/files?manual-url={{.ManualUrl}}"
           aria-label="download {{dlTitle .}}">
            <div class="title">{{dlTitle .}}</div>
            <ul>
                {{$os := toLower .OS.String}}
                {{if ne $os "any-operating-system"}}
                    {{template "svg-icon" $os}}
                {{end}}
                {{if .EstimatedBytes}}
                    <li class="size">{{formatBytes .EstimatedBytes}}</li>
                {{end}}
            </ul>
            <ul class="additional-details">
                <li class="type">Type: <span class="highlight">{{.Type}}</span></li>
                {{if .LanguageCode}}
                    <li>Language: <span class="highlight">{{.LanguageCode}}</span></li>
                {{end}}
                {{if .Version}}
                    <li>Version: <span class="highlight">{{.Version}}</span></li>
                {{end}}

            </ul>
        </a>
    {{end}}

    <script>
        // the script below rearranges downloads on the client side to hide downloads
        // for other operating systems (other == not the same as presented by the browser)
        document.addEventListener("DOMContentLoaded", () => {
            let cosDlsContainer = document.querySelector(".current-operating-system.downloads")
            let oosDlsContainer = document.querySelector(".other-operating-systems.downloads")
            let cosDls = cosDlsContainer.querySelectorAll(".downloads-list .download")
            let oosDlsList = oosDlsContainer.querySelector(".downloads-list")

            // convert navigator.platform to enum values used by vangogh/gaugin
            let os = ""
            const anyOS = "any-operating-system"
            switch (navigator.platform) {
                case "Win32":
                    os = "Windows";
                    break;
                case "MacIntel":
                    os = "macOS";
                    break;
                case "iPhone":
                    // treat iOS as macOS
                    os = "macOS";
                    break;
                case "Linux x86_64":
                    os = "Linux";
                    break;
            }

            // keep only current OS downloads and any-operating-system downloads (Extras),
            // move everything else to "Other operating systems downloads" section
            for (d of cosDls) {
                if (!d.classList.contains(os) &&
                    !d.classList.contains(anyOS)) {
                    oosDlsList.appendChild(d);
                }
            }

            // check how many items remain in the "Current OS downloads",
            // remove that section and expand "Other OS downloads" if none
            cosDls = cosDlsContainer.querySelectorAll(".downloads-list .download")
            if (cosDls.length === 0) {
                cosDlsContainer.remove();
                oosDlsContainer.setAttribute("open", "");
            }

            // remove "Other OS downloads" if it's empty
            oosDls = oosDlsContainer.querySelectorAll(".downloads-list .download")
            if (oosDls.length === 0) {
                oosDlsContainer.remove();
            }
        });
    </script>
{{end}}